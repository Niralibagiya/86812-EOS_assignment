#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <pthread.h>
#include <time.h>

#define QUEUE_SIZE 5

typedef struct {
    int buffer[QUEUE_SIZE];
    int head;
    int tail;
    pthread_mutex_t mutex;
} CircularQueue;

void enqueue(CircularQueue *queue, int value) {
    pthread_mutex_lock(&queue->mutex);
    if ((queue->tail + 1) % QUEUE_SIZE == queue->head) {
        printf("Queue is full, unable to enqueue %d\n", value);
    } else {
        queue->buffer[queue->tail] = value;
        queue->tail = (queue->tail + 1) % QUEUE_SIZE;
        printf("Enqueued: %d\n", value);
    }
    pthread_mutex_unlock(&queue->mutex);
}

int dequeue(CircularQueue *queue) {
    int value = -1;
    pthread_mutex_lock(&queue->mutex);
    if (queue->head == queue->tail) {
        printf("Queue is empty, unable to dequeue\n");
    } else {
        value = queue->buffer[queue->head];
        queue->head = (queue->head + 1) % QUEUE_SIZE;
        printf("Dequeued: %d\n", value);
    }
    pthread_mutex_unlock(&queue->mutex);
    return value;
}

int main() {
    int shmid;
    CircularQueue *queue;

    // Create shared memory
    shmid = shmget(IPC_PRIVATE, sizeof(CircularQueue), IPC_CREAT | 0666);
    if (shmid < 0) {
        perror("shmget");
        exit(1);
    }

    // Attach shared memory
    queue = (CircularQueue *)shmat(shmid, NULL, 0);
    if (queue == (CircularQueue *)-1) {
        perror("shmat");
        exit(1);
    }

    // Initialize the circular queue
    queue->head = 0;
    queue->tail = 0;
    pthread_mutex_init(&queue->mutex, NULL);

    pid_t pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    }

    if (pid > 0) { // Parent process
        srand(time(NULL));
        for (int i = 0; i < 20; i++) { // Add 20 random numbers
            int num = rand() % 100; // Random number between 0 and 99
            enqueue(queue, num);
            sleep(1); // Sleep for a while to simulate work
        }
        wait(NULL); // Wait for child to finish
    } else { // Child process
        for (int i = 0; i < 20; i++) { // Remove 20 numbers
            dequeue(queue);
            sleep(2); // Sleep for a while to simulate work
        }
    }

    // Cleanup
    shmdt(queue);
    shmctl(shmid, IPC_RMID, NULL);
    return 0;
}
